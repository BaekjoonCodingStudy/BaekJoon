#include <iostream>
using namespace std;

char bord[20][20];
char aw[20][20];
int X[4]= {0,1,0,-1 };
int Y[4]= { 1,0,-1,0};

int main() {

   ios_base :: sync_with_stdio(false);
   cin.tie(NULL);
   cout.tie(NULL);

   int R,C;

   cin >> R >> C;

   for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
         cin >> bord[i][j];
      }
   }

   // 변경된 섬 저장.
   for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
         if (bord[i][j] == 'X') {
            int count = 0;
            for (int e = 0; e < 4; e++) {
               int x = i+X[e];
               int y = j+Y[e];
               if (x < 0 || y < 0 || x >= R || y >= C) {
                  count++;
                  continue;
               }
               if (bord[x][y] == '.') {
                  count++;
               }
            }
            if (count >= 3) {
               aw[i][j] = '.';
            }else {
               aw[i][j] = 'X';
            }
         }else {
            aw[i][j] = '.';
         }
      }
   }

   // 위에서 아래로 처음 몇번째 줄에 x 가 있는지 저장.
   int a = 30;
   int b = 30;
   for (int i = 0; i < R; i++) {
      for (int j = 0; j < C; j++) {
         if (aw[i][j] == 'X') {
            a = min(i,a);
         }
      }
   }

   // 왼쪽에서 오른쪽으로 몇번째 줄에 x 가 있는지 저장. 제일 가까이 있는 X 찾기
   for (int i = 0; i < C; i++) {
      for (int j = 0; j < R; j++) {
         if (aw[j][i] == 'X') {
            b = min(i,b);
         }
      }
   }

   int c = -1;
   int d = -1;

   // 아래에서 위로 처음 몇번째 줄에 x 가 있는지 저장.
   for (int i = R; i >= 0; i--) {
      for (int j = C; j >= 0; j--) {
         if (aw[i][j] == 'X') {
            c = max(i,c);
         }
      }
   }

   // 오른쪽에서 왼쪽으로 몇번째 줄에 x 가 있는지 저장. 제일 먼쪽에 있는 X 찾기
   for (int i = C; i >= 0 ; i--) {
      for (int j = R; j >= 0; j--) {
         if (aw[j][i] == 'X') {
            d = max(i,d);
         }
      }
   }

   for (int i = a; i <= c; i++) {
      for (int j = b; j <= d; j++) {
         cout << aw[i][j];
      }
      cout << '\n';
   }

   // O(RxC)
   // 바다로 바뀐 섬을 따로 저장 하고
   // 위에서 몇번째 줄에 있는 x
   // 아래서 몇번째 줄에 있는 x
   // 오른쪽에서 왼쪽으로 순회할때 가장 오른쪽에 있는 x
   // 왼쪽에서 오른쪽으로 순회할때 가장 왼쪽에 있는 x 를 찾아 부분만 for 문을 돌아 출력 하는 방식.

   
   return 0;
}
