#include <iostream>
#include <queue>
using namespace std;

int bord[1001][1001];
int aw[1001][1001];
int X[4] = {0,1,0,-1};
int Y[4] = {1,0,-1,0};
queue<pair<int,int>> q;

int main() {

   ios_base :: sync_with_stdio(false);
   cin.tie(NULL);
   cout.tie(NULL);

   int N,M;
   cin >> N >> M;

   // 2인 부분 위치 큐에 저장.
   for (int i = 0; i < N; i++) {
      for (int j = 0; j < M; j++) {
         cin >> bord[i][j];
         if (bord[i][j] == 2) {
            q.push({i,j});
         }
      }
   }

   // 2의 위치부터 BFS 시작
   while (!q.empty()) {

      auto test = q.front();
      q.pop();
      int x = test.first;
      int y = test.second;

      for (int i = 0; i < 4; i++) {
         int xx = x + X[i];
         int yy = y + Y[i];

         if (xx < 0 || yy < 0 || xx >= N || yy >= M || bord[xx][yy] == 2) {
            continue;
         }

         if (bord[xx][yy] == 1 && aw[xx][yy] == 0) {
            aw[xx][yy] = aw[x][y] + 1;
            q.push({xx,yy});
         }
      }
   }

   // 갈수 있는 위치인데 0인경우 -1 변경후 출력
   for (int i = 0; i < N; i++) {
      for (int j = 0; j < M; j++) {
         if (aw[i][j] == 0 && bord[i][j] == 1) {
            aw[i][j] = -1;
         }
         cout << aw[i][j] << ' ';
      }
      cout << '\n';
   }

   return 0;
}
